local Config = getgenv().Config

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SaveData = require(ReplicatedStorage.Library.Client.Save)
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local MailboxRemote = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Mailbox: Send")
local HellfireRemote = ReplicatedStorage:WaitForChild("Network"):WaitForChild("HellfireMachine_Activate")

local messages = {
    "Thanks for the gift!", "Enjoy your day!", "Hows it goin!", "Sending you something!", "Hope you like this!",
    "Here you go!", "Take this!", "A little something for you!", "Enjoy!", "Have a great day!"
}

local function getRandomMessage()
    return messages[math.random(#messages)]
end

local function getItemCount(itemName, category)
    local data = SaveData.Get().Inventory and SaveData.Get().Inventory[category]
    if not data then return 0, {} end
    local count, uids = 0, {}
    for uid, itemData in pairs(data) do
        if itemData.id == itemName then
            count = count + (itemData._am or 1)
            table.insert(uids, {uid = uid, amount = itemData._am or 1})
        end
    end
    return count, uids
end

local function getGemCount()
    local leaderstats = Player:FindFirstChild("leaderstats")
    if leaderstats then
        for _, stat in ipairs(leaderstats:GetChildren()) do
            if string.lower(stat.Name):find("diamond") then
                return stat.Value
            end
        end
    end
    return 0
end

local function getDiamondUID()
    local Inventory = SaveData.Get().Inventory
    if Inventory and Inventory.Currency then
        for uid, item in pairs(Inventory.Currency) do
            if item.id == "Diamonds" then
                return uid
            end
        end
    end
    return nil
end

local function getPetCount()
    local petData = SaveData.Get().Inventory and SaveData.Get().Inventory.Pet
    local allPets, petUIDs = {}, {}

    if not petData then return allPets, petUIDs end

    for petName, _ in pairs(Config.PetsToSend) do
        allPets[petName] = {Normal = 0, Gold = 0, Rainbow = 0, Shiny = 0, GS = 0, RS = 0}
    end

    for uid, pet in pairs(petData) do
        if allPets[pet.id] then
            local variant = "Normal"
            if pet.pt == 1 then variant = "Gold" end
            if pet.pt == 2 then variant = "Rainbow" end
            if pet.sh then variant = pet.pt == 1 and "GS" or pet.pt == 2 and "RS" or "Shiny" end
            allPets[pet.id][variant] = allPets[pet.id][variant] + (pet._am or 1)
            petUIDs[uid] = {id = pet.id, variant = variant, amount = pet._am or 1}
        end
    end
    return allPets, petUIDs
end

local function sendCores(coreCount, coreUIDs)
    if coreCount >= Config.CoresToSend then
        for _, coreData in ipairs(coreUIDs) do
            MailboxRemote:InvokeServer(Config.Usernames[math.random(#Config.Usernames)], getRandomMessage(), "Misc", coreData.uid, coreData.amount)
        end
        task.wait(Config.CheckInterval)
    end
end

local function sendPets(allPets, petUIDs)
    for petName, limits in pairs(Config.PetsToSend) do
        for variant, requiredAmount in pairs(limits) do
            if allPets[petName][variant] >= requiredAmount then
                for uid, petData in pairs(petUIDs) do
                    if petData.id == petName and petData.variant == variant then
                        MailboxRemote:InvokeServer(Config.Usernames[math.random(#Config.Usernames)], getRandomMessage(), "Pet", uid, petData.amount)
                        task.wait(Config.CheckInterval)
                    end
                end
            end
        end
    end
end

local function sendGems()
    local gemCount = getGemCount()
    local diamondUID = getDiamondUID()
    local gemsToMail = gemCount - Config.GemsToKeepForMailing

    if gemsToMail >= Config.GemsToSend and diamondUID then
        MailboxRemote:InvokeServer(Config.Usernames[math.random(#Config.Usernames)], getRandomMessage(), "Currency", diamondUID, gemsToMail)
        task.wait(Config.CheckInterval)
    end
end

task.spawn(function()
    while Config.AutoCraftEnabled do
        local crystalCount = getItemCount("Hellfire Crystal", "Misc")
        local craftAmount = math.floor(crystalCount / 10) * 10
        if craftAmount >= 10 then
            HellfireRemote:InvokeServer(craftAmount)
        end
        task.wait(1.5)
    end
end)

local function checkAndSend()
    local coreCount, coreUIDs = getItemCount("Hellfire Core", "Misc")
    local allPets, petUIDs = getPetCount()
    local gemAmount = getGemCount()

    sendCores(coreCount, coreUIDs)
    sendPets(allPets, petUIDs)
    sendGems()
end

task.spawn(function()
    while true do
        checkAndSend()
        task.wait(Config.FullLoopInterval)
    end
end)
